inst = mc.mcGetInstance()

function customType(object)
    -- Check if the object is a table before trying to access its metatable or fields
    if type(object) == "table" then
        local mt = getmetatable(object)
        -- Check if __type exists on the object itself first, then fallback to the metatable
        return object.__type or (mt and mt.__type) or "table"
    else
        -- If object is not a table, return its native type (e.g., "function", "string", etc.)
        return type(object)
    end
end

Controller = {}
Controller.__index = Controller
Controller.__type = Controller

function Controller.typeCheck(objects, types, funcName)
    for i, object in ipairs(objects) do
        local expectedTypes = types[i]
        local actualType = customType(object)

        if type(expectedTypes) == "string" then
            expectedTypes = { expectedTypes }
        end
        
        local typeMatch = false
        for _, expectedType in ipairs(expectedTypes) do
            if actualType == expectedType then
                typeMatch = true
                break
            end
        end
        
        if not typeMatch then
            print("Parameter "..i.." of function "..funcName.." expected one of "..table.concat(expectedTypes, ", ")..", got "..tostring(actualType)..".")
            return true
        end
	end
end


function Controller:new()
	local self = {} -- Create the new object
    self.__type = "Controller" -- Set __type on the instance itself
    setmetatable(self, Controller)
    self.UP = Button:new(self, "DPad_UP")
    self.DOWN = Button:new(self, "DPad_DOWN")
    self.RIGHT = Button:new(self, "DPad_RIGHT")
    self.LEFT = Button:new(self, "DPad_LEFT")
    self.A = Button:new(self, "Btn_A")
    self.B = Button:new(self, "Btn_B")
    self.X = Button:new(self, "Btn_X")
    self.Y = Button:new(self, "Btn_Y")
    self.START = Button:new(self, "Btn_START")
    self.BACK = Button:new(self, "Btn_BACK")
    self.LTH = Button:new(self, "Btn_LTH")
    self.RTH = Button:new(self, "Btn_RTH")
    self.LSB = Button:new(self, "Btn_LS")
    self.RSB = Button:new(self, "Btn_RS")
    self.LTR = Trigger:new(self, "LTR_Val")
    self.RTR = Trigger:new(self, "RTR_Val")
    self.LTH_X = ThumbstickAxis:new(self, "LTH_X_Val")
    self.LTH_Y = ThumbstickAxis:new(self, "LTH_Y_Val")
    self.RTH_X = ThumbstickAxis:new(self, "RTH_Val")
    self.RTH_Y = ThumbstickAxis:new(self, "RTH_Y_Val")
    self.inputs = {
        self.UP, self.DOWN, self.RIGHT, self.LEFT, self.A, self.B, self.X, self.Y, self.START,
        self.BACK, self.LTH, self.RTH, self.LSB, self.RSB, self.LTR, self.RTR
    }
    self.axes = {self.LTH_X, self.LTH_Y, self.RTH_X, self.RTH_Y}
    self.shift_btn = nil
    self.jogIncrement = 0.1
    self.logLevel = 1
    self.logLevels = {"ERROR", "WARNING", "INFO", "DEBUG"}

    self.xcCntlEStop = Slot:new(function()
		local hsig = mc.mcSignalGetHandle(inst, mc.ISIG_EMERGENCY)
		local state = mc.mcSignalGetState(hsig) > 0
		mc.mcSignalSetState(hsig, not state)
    end)

    self.xcCntlTorchOn = Slot:new(function()
		local hsig = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT3)
		local hsig2 = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT4)
		local state = mc.mcSignalGetState(hsig) > 0
		local state2 = mc.mcSignalGetState(hsig2) > 0
		mc.mcSignalSetState(hsig, not state)
		mc.mcSignalSetState(hsig2, not state)
    end)

    self.xcCntlEnable = Slot:new(function()
		self:xcErrorCheck(mc.mcCntlEnable(inst, not self:getMachSignalState(mc.OSIG_MACHINE_ENABLED)))
    end)

    self.xcCntlCycleStart = Slot:new(function()
		if self:getMachSignalState(mc.OSIG_RUNNING_GCODE) then
			self:xcErrorCheck(mc.mcCntlFeedHold(inst))
		else
			self:xcErrorCheck(mc.mcCntlCycleStart(inst))
		end
    end)

    return self
end

function Controller:xcGetRegValue(reg)
	self:xcCntlLog("xcGetRegValue called with: "..reg,4)
    if self:typeCheck({reg},{"string"},"xcGetRegValue") then return end
	self:xcCntlLog("after type check",4)
    local hreg, rc = mc.mcRegGetHandle(inst, reg)
	self:xcCntlLog("after mcRegGetHandle call",4)
    if rc == mc.MERROR_NOERROR then
        local val, rc = mc.mcRegGetValueLong(hreg)
        if rc == mc.MERROR_NOERROR then
			self:xcCntlLog("xcGetRegValue returning: "..val,4)
            return val
			
        else
			self:xcCntlLog("Error in mcRegGetValueLong", 1)
            self:xcCntlLog(mc.mcCntlGetErrorString(inst, rc), 1)
        end
    else
		self:xcCntlLog("Error in mcRegGetHandle",1)
        self:xcCntlLog(mc.mcCntlGetErrorString(inst, rc), 1)
    end
end

function Controller:getMachSignalState(signal)
    if self:typeCheck({signal},{"number"},"getMachSignalState") then return end
    local hsig, rc = mc.mcSignalGetHandle(inst, signal)
    if rc == mc.MERROR_NOERROR then
        local val, rc = mc.mcSignalGetState(hsig)
        if rc == mc.MERROR_NOERROR then
            return val > 0
        else
            self:xcCntlLog(mc.mcCntlGetErrorString(inst, rc),1)
        end
    else
        self:xcCntlLog(mc.mcCntlGetErrorString(inst, rc),1)
    end
end

function Controller:xcToggleMachSignalState(signal)
	if not self then return end
	if Controller.typeCheck({signal},{"number"},"Controller:xcToggleMachSignalState") then return end
    self:xcErrorCheck(mc.mcSignalSetState(signal, not self.getMachSignalState(signal)))
end

function Controller:xcCntlLog(msg, level)
	if not self then return end
	if self.logLevel == 0 then return end
    if Controller.typeCheck({msg,level},{"string","number"},"Controller:xcCntlLog") then return end
    if level <= self.logLevel then
		if mc.mcInEditor() ~= 1 then
			mc.mcCntlLog(inst, "[[XBOX CONTROLLER "..self.logLevels[self.logLevel].."]]: "..msg, "", -1)
		else
			print("[[XBOX CONTROLLER "..self.logLevels[self.logLevel].."]]: "..msg)
		end
	end
end

function Controller:xcErrorCheck(rc)	if not self then return end	
	if Controller.typeCheck({rc},{"number"},"Controller:xcErrorCheck")then return end
    if rc ~= mc.MERROR_NOERROR then
        self:xcCntlLog(mc.mcCntlGetErrorString(inst, rc), 1)
    end
end

function Controller:xcJogSetInc(val)
	self:xcCntlLog("Entered xcJogSetInc with val = " .. tostring(val), 4)  -- Log the input value
    
    if not self then
        self:xcCntlLog("Self is nil in xcJogSetInc", 1)  -- Log if `self` is nil
        return
    end
    
    if self.typeCheck({val},{"number"},"Controller:xcJogSetInc") then
        self:xcCntlLog("Type check failed in xcJogSetInc", 1)  -- Log if type check fails
        return
    end
    
    self.jogIncrement = val
    self:xcCntlLog("Set jogIncrement to " .. tostring(self.jogIncrement), 4)  -- Log the updated value
end

function Controller:update()
	mc.mcCntlSetLastError(inst, "Controller:update() called!")
	if not self then 
		mc.mcCntlSetLastError(inst, "Controller failed self check")
		return end
	self:xcCntlLog("After self check",4)
    if self.shift_btn ~= nil then
        self.shift_btn:getState()
    end
	self:xcCntlLog("After shift button check",4)
    for i, input in ipairs(self.inputs) do
        input:getState()
    end
	self.xcCntlLog("After input button check",4)
    for i, axis in ipairs(self.axes) do
        axis:update()
    end
end

function Controller:assignShift(input)
	if not self then return end
    if Controller.typeCheck({input},{{"Button","Trigger"}},"Controller:assignShift") then return end
    self.shift_btn = input
    self:xcCntlLog(""..self.shift_btn.id.." assigned as controller shift button.", 3)
    for i, input in ipairs(self.inputs) do
        if input == self.shift_btn then
            table.remove(self.inputs, i)
            return
        end
    end
end

function Controller:mapSimpleJog(reversed)
	if not self then return end
    if self.typeCheck({reversed},{"boolean"},"Controller:mapSimpleJog") then return end
    reversed = reversed and true or false
	self:xcCntlLog("Jog reverse flag set to: "..tostring(reversed),4)
    -- DPad regular jog
    self.UP.down:connect(Slot:new(function()
        mc.mcJogVelocityStart(inst, (reversed and mc.Y_AXIS) or mc.X_AXIS, mc.MC_JOG_POS)
    end))
    self.UP.up:connect(Slot:new(function()
        mc.mcJogVelocityStop(inst, (reversed and mc.Y_AXIS) or mc.X_AXIS)
    end))
    self.DOWN.down:connect(Slot:new(function()
        mc.mcJogVelocityStart(inst, (reversed and mc.Y_AXIS) or mc.X_AXIS, mc.MC_JOG_NEG)
    end))
    self.DOWN.up:connect(Slot:new(function()
        mc.mcJogVelocityStop(inst, (reversed and mc.Y_AXIS) or mc.X_AXIS)
    end))
    self.RIGHT.down:connect(Slot:new(function()
        mc.mcJogVelocityStart(inst, (reversed and mc.X_AXIS) or mc.Y_AXIS, mc.MC_JOG_POS)
    end))
    self.RIGHT.up:connect(Slot:new(function()
        mc.mcJogVelocityStop(inst, (reversed and mc.X_AXIS) or mc.Y_AXIS)
    end))
    self.LEFT.down:connect(Slot:new(function()
        mc.mcJogVelocityStart(inst, (reversed and mc.X_AXIS) or mc.Y_AXIS, mc.MC_JOG_NEG)
    end))
    self.LEFT.up:connect(Slot:new(function()
        mc.mcJogVelocityStop(inst, (reversed and mc.X_AXIS) or mc.Y_AXIS)
    end))
    if reversed then
        self:xcCntlLog("Standard velocity jogging with X and Y axis orientation reversed mapped to D-pad", 3)
    else
        self:xcCntlLog("Standard velocity jogging mapped to D-pad", 3)
    end

    self.UP.down:altConnect(Slot:new(function()
        mc.mcJogIncStart(inst, reversed and mc.Y_AXIS or mc.X_AXIS, self.jogIncrement)
    end))
    self.DOWN.down:altConnect(Slot:new(function()
        mc.mcJogIncStart(inst, reversed and mc.Y_AXIS or mc.X_AXIS, -1 * self.jogIncrement)
    end))
    self.RIGHT.down:altConnect(Slot:new(function()
        mc.mcJogIncStart(inst, reversed and mc.X_AXIS or mc.Y_AXIS, self.jogIncrement)
    end))
    self.LEFT.down:altConnect(Slot:new(function()
        mc.mcJogIncStart(inst, reversed and mc.X_AXIS or mc.Y_AXIS, -1 * self.jogIncrement)
    end))
    if reversed then
        self:xcCntlLog("Incremental jogging with X and Y axis orientation reversed mapped to D-pad alternate function", 3)
    else
        self:xcCntlLog("Incremental jogging mapped to D-pad alternate function", 3)
    end
end

Signal = {}
Signal.__index = Signal
Signal.__type = "Signal"

function Signal:new(controller, button, id)
	if Controller.typeCheck({controller, button, id},{"Controller",{"Button","Trigger"},"string"},"Signal:new") then return end
    local self = setmetatable({},Signal)
	if not self then return end
    self.id = id
    self.btn = button
    self.slot = nil
    self.altSlot = nil
    self.controller = controller
    return self
end

function Signal:connect(slot)
	if not self then return end
	if Controller:typeCheck({slot},{"Slot"},"Signal:connect") then return end
    self.slot = slot
	self.controller:xcCntlLog(self.btn.id..self.id.." connected to Slot "..tostring(self.slot),4)
	
end

function Signal:altConnect(slot)
	if not self then return end
	if Controller:typeCheck({slot},{"Slot"},"Signal:altConnect") then return end
    self.altSlot = slot
	self.controller:xcCntlLog(self.btn.id..self.id.." connected to Slot "..tostring(self.altSlot),4)
end

function Signal:emit()
	if not self then return end
    self.controller:xcCntlLog("Signal "..self.btn.id..self.id.." emitted.", 3)
    if (not self.controller.shift_btn.pressed) and (self.slot ~= nil) then
        self.slot.func()
	elseif (self.controller.shift_btn.pressed) and (self.altSlot == nil and self.slot ~= nil) then 
		self.slot.func()
    elseif (self.controller.shift_btn.pressed) and (self.altSlot ~= nil) then
        self.altSlot.func()
    end
end

Button = {}
Button.__index = Button
Button.__type = "Button"

function Button:new(controller, name)
	if Controller.typeCheck({controller, name},{"Controller","string"},"Button:new") then return end
    local self = setmetatable({}, Button)
    self.controller = controller
    self.id = name
    self.pressed = false
    self.up = Signal:new(self.controller, self, "up")
    self.down = Signal:new(self.controller, self, "down")
    return self
end

function Button:getState()
	self.controller:xcCntlLog("getState called for "..self.id,4)
	local state = self.controller:xcGetRegValue(string.format("mcX360_LUA/%s", self.id))
	self.controller:xcCntlLog("state is: "..state,4)
    if (state == 1) and (not self.pressed) then
        self.pressed = true
        self.down:emit()
    elseif (state == 0) and self.pressed then
        self.pressed = false
        self.up:emit()
    end
	self.controller:xcCntlLog("exiting getState",4)
end

Trigger = {}
Trigger.__index = Trigger
Trigger.__type = "Trigger"

function Trigger:new(controller, id)
	if Controller.typeCheck({controller,id},{"Controller","string"},"Trigger:new") then return end
    local self = setmetatable({}, Trigger)
	if not self then return end
    self.controller = controller
    self.id = id
    self.value = 0
    self.pressed = false
    self.down = Signal:new(self.controller, self, "down")
    self.up = Signal:new(self.controller, self, "up")
    self.func = nil
    return self
end

function Trigger:getState()
	self.controller:xcCntlLog("getState called for "..self.id,4)
	if not self then return end
    local val = self.controller:xcGetRegValue(string.format("mcX360_LUA/%s", self.id))
    if type(val) == "number" then
        self.value = val
        if self.func ~= nil then
            self.func(self.value)
            return
        end
        if math.abs(val) > 125 and not self.pressed then
            self.down.emit()
            self.pressed = true
        elseif math.abs(val) < 5 and self.pressed then
            self.up.emit()
            self.pressed = false
        end
    else
        self.controller:xcCntlLog("Value for Trigger:getState method is not a number", 1)
    end
end

function Trigger:connect(func)
	if not self then return end
    if Controller.typeCheck({func},{"function"},"Trigger:connect") then return end
    self.func = func
end

ThumbstickAxis = {}
ThumbstickAxis.__index = ThumbstickAxis
ThumbstickAxis.__type = "ThumbstickAxis"

function ThumbstickAxis:new(controller, id)
	if Controller.typeCheck({controller, id},{"Controller","string"},"ThumbstickAxis:new") then return end
    local self = setmetatable({},ThumbstickAxis)
	if not self then return end
    self.controller = controller
    self.id = id
    self.axis = nil
    self.inverted = false
    self.deadzone = 10
    self.rate = nil
	self.value = 0
    self.moving = false
    self.rateSet = false
    return self
end

function ThumbstickAxis:setDeadzone(deadzone)
	if not self then return end
    if self.controller.typeCheck({deadzone},{"number"},"ThumbstickAxis:setDeadzone") then return end
    self.deadzone = math.abs(deadzone)
end

function ThumbstickAxis:connect(axis,inverted)
	if not self then return end
    if self.controller.typeCheck({axis,inverted},{"number","boolean"},"ThumbstickAxis:connect") then return end
    self.axis = axis
    self.inverted = inverted
    local rc
    self.rate, rc = mc.mcJogGetRate(inst, self.axis)
    self.controller:xcErrorCheck(rc)
    self.controller:xcCntlLog(self.id.." connected to "..tostring(self.axis), 4)
    self.controller:xcCntlLog("Initial jog rate for "..tostring(self.axis).." = "..self.rate, 4)
end

function ThumbstickAxis:update()
	if not self then return end
    if self.axis == nil then return end
	
	self.value = self.controller:xcGetRegValue(string.format("mcX360_LUA/%s", self.id))
	
    if not self.moving and not self.rateReset then
        if mc.mcJogGetRate(inst, self.axis) ~= self.rate then
            mc.mcJogSetRate(inst, self.axis, self.rate)
            self.rateReset = true
        end
    end

    if math.abs(self.value) > self.deadzone and not self.moving then
        self.moving = true
        self.rateReset = false
        self.controller:xcErrorCheck(mc.mcJogSetRate(inst, self.axis, math.abs(self.value)))
        self.controller:xcErrorCheck(mc.mcJogVelocityStart(inst, self.axis, (self.inverted and self.value > 0) and mc.MC_JOG_POS or mc.MC_JOG_NEG))
    end

    if math.abs(self.value) < self.deadzone and self.moving then
        self.controller:xcErrorCheck(mc.mcJogVelocityStop(inst, self.axis))
        self.moving = false
        self.controller:xcErrorCheck(mc.mcJogSetRate(inst, self.axis, self.rate))
        self.rateReset = true
    end
end


Slot = {}
Slot.__index = Slot
Slot.__type = "Slot"

function Slot:new(func)
    if Controller.typeCheck({func},{"function"},"Slot:new") then return end
    local self = setmetatable({},Slot)
	if not self then return end
    self.func = func
    return self
end
---------------------------------
--- Custom Configuration Here ---

-- create a Controller instance.  
-- You can name it anything, but using "xc" makes the Controller's API closely resemble
-- the Mach4 API.
local XBOX = Controller:new()

-- log levels are:
-- 0: Disabled
-- 1: Error
-- 2: Warning
-- 3: Info
-- 4: Debug
-- Log messages will only be displayed for the current log level and all lower log levels.
-- Default logLevel is 1, so there is no need to set it if you only want error message output.
-- This call is simply provided as an example.
XBOX.logLevel = 4

-- Assign left trigger as shift
-- You can use any Button or Analog object.  The Analog object defines its self.pressed
-- attribute as true when the value is over 25, so if you use a trigger for your shift
-- button, shift will be active as long as the trigger is at least 25% depressed.

XBOX:assignShift(XBOX.LTR)

-- Connect machine Z Axis to Right thumbstick Y axis
-- A Controller has 4 ThumbstickAxis objects, representing the X and Y axes of each thumbstick
-- Simply call the connect method and pass it a Mach4 axis to enable analog control of that 
-- axis via the assigned thumbstick axis.  Here, the machine's Z axis is connected to the
-- "up and down" axis of the right thumbstick
XBOX.RTH_Y:connect(mc.Z_AXIS)

-- Map simple jogging to the DPad
-- pass true to reverse orientation of X and Y axes
-- for regular orientation, pass nil, false or simply omit the parameter
-- the mapSimpleJog method is provided as a convenience and maps regular jogging to the D-pad 
-- and incremental jogging to the D-pad's "alternate function."  alternate functions for an input
-- are mapped by using the altConnect method to connect any of an input's signals to a Slot
-- An input's "alternate function" will be called if the connected Signal is emitted while 
-- the Controller's assigned "shift button" is pressed
XBOX:mapSimpleJog(true)

-- Set jog increment to 0.1 inches
XBOX:xcJogSetInc(0.1)

-- Map E-Stop to B button
-- xcCntlEStop is a convenience method that toggles the state of the EStop
XBOX.B.down:connect(XBOX.xcCntlEStop)

-- Map torch on/off (with THC) to Y button
-- xcCntlTorchOn assumes that output signal #3 turns the torch on and output signal #4
-- enables Torch Height Control.  If these are not the appropriate output signals
-- for your setup, either edit the xcCntlTorchOn method in the code above, or define your
-- own Slot that toggles the appropriate signals.
XBOX.Y.down:connect(XBOX.xcCntlTorchOn)

-- Map machine enable to Right Shoulder button
-- xcCntlEnable is a convenience method that toggles the enabled/disabled state of the machine
XBOX.RSB.down:connect(XBOX.xcCntlEnable)

-- Map cycle start/feed hold to X button
-- xcCntlCycleStart is a convenience method that calls mcCntlCycleStart if Gcode is not
-- currently running, or mcCntlFeedHold if Gcode is currently running.
XBOX.X.down:connect(XBOX.xcCntlCycleStart)



---------------------------------
if not mcLuaPanelParent then
    XBOX:xcCntlLog("mcLuaPanelParent is nil!", 1)
else
    XBOX:xcCntlLog("mcLuaPanelParent is valid: " .. tostring(mcLuaPanelParent), 4)
end
XBOX:xcCntlLog("Creating X360_timer",4)
X360_timer = wx.wxTimer(mcLuaPanelParent)
XBOX:xcCntlLog("Attempting to connect timer event", 4)
mcLuaPanelParent:Connect(wx.wxEVT_TIMER, function(event)
    XBOX:xcCntlLog("Timer event triggered", 4)
    XBOX:update(XBOX)
end)
XBOX:xcCntlLog("Timer event connected", 4)

XBOX:xcCntlLog("Calling update once",4)
XBOX:update()
XBOX:xcCntlLog("Starting X360 timer with interval 100ms", 4)
if XBOX then
    XBOX:xcCntlLog("XBOX object is valid, starting timer", 4)
    X360_timer:Start(100)
else
    mc.mcCntlSetLastError(inst, "XBOX object is nil before starting timer")
end
